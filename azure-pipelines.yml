trigger: none
pr: none
resources:
- repo: self

variables:
  subscription: 'f399aea4-cf33-4d7b-ab5b-858da090b1b2'
  acr: 'acrkimth.azurecr.io'
  acrSecret: 'acr-secret'
  resourceGroup: 'test_resource'
  aks: 'aks-test'
  nodename: 'nodepool1'
  projectPath: 'Pipelines'
  projectName: 'AzureStackHckTestWebApp'
  branch: 'master'
  name: $[ replace(lower(variables.projectName), '.', '-') ]
  imageTag: '$(Build.BuildId)'
  domain: 'aks-test.modetour.com'
  healthcheck: '/healthcheck'
  port: '80'
  requestCpu: '1000m'
  requestMemory: '1G'
  limitCpu: '1000m'
  limitMemory: '1G'
  replica: '1'
  minreplica: '1'
  maxreplica: '1'
  sslCertificate: 'modetour-dev-pfx'
  environment: 'Development'
  env: 'dev'

stages:
- stage: BuildAndDeploy
  displayName: Build and Deploy Directly on AKS
  jobs:
  - job: BuildAndDeploy
    steps:
    - bash: |
        az login --service-principal -u $CLIENT_ID_Dimoa -p $CLIENT_PASS_Dimoa --tenant $TENANT_ID_Dimoa
        az account set --subscription $(subscription)
        az aks get-credentials --resource-group $(resourceGroup) --name $(aks) --admin
        
        # namespace가 없으면 생성
        kubectl get namespace $(name)-$(env) || kubectl create namespace $(name)-$(env)
        kubectl config set-context --current --namespace=$(name)-$(env)

        # Kaniko Pod 정의 파일 생성
        cat <<EOF > kaniko-pod.yaml
        apiVersion: v1
        kind: Pod
        metadata:
          name: kaniko-build
          namespace: $(name)-$(env)
        spec:
          containers:
          - name: kaniko
            image: gcr.io/kaniko-project/executor:latest
            args:
            - "--dockerfile=./$(projectName)/Dockerfile"
            - "--context=."
            - "--destination=$(acr)/$(name):$(env)-$(imageTag)"
            volumeMounts:
            - name: kaniko-secret
              mountPath: /kaniko/.docker
          restartPolicy: Never
          volumes:
          - name: kaniko-secret
            secret:
              secretName: $(acrSecret)
        EOF

        # Kaniko Pod 실행 및 모니터링
        kubectl apply -f kaniko-pod.yaml
        kubectl wait --for=condition=complete pod/kaniko-build --timeout=600s

        # Kaniko Pod 삭제 (클린업)
        kubectl delete pod kaniko-build

        # Helm Chart 배포
        helm upgrade --install \
          --set acrSecret=$(acrSecret) \
          --set name=$(name) \
          --set namespace=$(name)-$(env) \
          --set nameservice=$(name)-$(env) \
          --set nodename=$(nodename) \
          --set image=$(acr)/$(name):$(env)-$(imageTag) \
          --set env=$(environment) \
          --set port=$(port) \
          --set healthcheck=$(healthcheck) \
          --set typesvc=ClusterIP \
          --set requestCpu=$(requestCpu) \
          --set requestMemory=$(requestMemory) \
          --set limitCpu=$(limitCpu) \
          --set limitMemory=$(limitMemory) \
          --set replica=$(replica) \
          --set minreplica=$(minreplica) \
          --set maxreplica=$(maxreplica) \
          --set targetCPUutilization=60 \
          --set autoscaler.enable=false \
          --set ingress.ssl=$(sslCertificate) \
          --set ingress.host=$(domain) \
          $(name)-$(env) ./Pipelines/Helm/$(projectName)
      env:
        CLIENT_PASS_Dimoa: $(CLIENT_PASS_Dimoa)
        CLIENT_ID_Dimoa: $(CLIENT_ID_Dimoa)
        TENANT_ID_Dimoa: $(TENANT_ID_Dimoa)
